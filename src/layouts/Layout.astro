---
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0"
    />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto:wght@300&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css"
    />
    <title>{title}</title>
    <script is:inline src="https://cdn.jsdelivr.net/npm/typed.js@2.0.12"></script>
  </head>
  <body class="dark">
    <slot />
    <script>
      // Global dark mode toggle functionality
      const toggleTheme = document.getElementById("toggle-theme");
      const toggleIcon = document.getElementById("toggle-icon");
      const toggleText = document.getElementById("toggle-text");

      toggleTheme.addEventListener('click', () => {
        document.body.classList.toggle('dark');
        if (toggleIcon.textContent.includes('toggle_on')) {
          toggleIcon.textContent = "toggle_off";
          toggleText.textContent = 'light mode';
        } else {
          toggleIcon.textContent = "toggle_on";
          toggleText.textContent = 'dark mode';
        }
      });

      // Mobile menu toggle
      const button = document.querySelector('#burger');
      const nav = document.querySelector('.nav');

      button.addEventListener('click', () => {
        nav.classList.toggle('activo');
      });

      // Initialize typed.js
      const typed = new Typed('.typed', {
        strings: [
          '<i class="titulo">Gonzalo Mina</i>',
          '<i class="titulo">Full Stack Dev</i>'
        ],
        typeSpeed: 75,
        startDelay: 300,
        backSpeed: 75,
        smartBackspace: true,
        shuffle: false,
        backDelay: 1000,
        loop: true,
        loopCount: false,
        showCursor: true,
        cursorChar: '__',
        contentType: 'html',
      });
    </script>
  </body>
</html>

<style is:global>
  @font-face {
    font-family: "minecraft";
    src: url(/assets/Minecraft.ttf);
  }

  :root {
    --primary-color: rgba(223, 230, 233, 1.0);
    --text-color: #282828;
    --text-color-terminal: #0DF205;
    --text-box-shadow: #09A603 3px 0 20px;
    --bg-color: rgba(223, 230, 233, 1.0);
    --bg-card-color: rgba(0, 206, 201, 1.0);
    --bg-bar-color: rgb(136, 135, 135);
    --border-articles: 0.4em;
    --transition: color 0.3s, background-color 0.4s easy-in-out;
    --skills-bar-length: 0%;
  }

  * {
    box-sizing: border-box;
    font-family: 'Roboto', sans-serif;
  }

  body {
    color: var(--text-color);
    background-color: rgb(248, 252, 255);
    min-height: 100vh;
    margin: 0;
  }

  body.dark {
    --primary-color: rgb(26, 26, 26);
    --bg-color: #282828;
    --text-color: rgba(223, 230, 233, 1.0);
    --bg-card-color: rgb(17, 21, 21);
    background-color: var(--bg-color);
    color: var(--text-color);
  }

  h1, h2, h3, h4, h5, h6, p, span, a, strong, blockquote, i, b, u, em {
    font-size: 1rem;
    font-weight: inherit;
    font-style: inherit;
    text-decoration: none;
    color: inherit;
  }

  li {
    list-style-type: none;
    text-decoration: none;
  }

  li:hover {
    text-decoration: underline;
    text-shadow: var(--text-box-shadow);
  }

  .articles {
    padding: 5rem;
  }

  @media screen and (max-width: 480px) {
    .articles {
      padding: 1rem;
    }
  }

  article {
    padding: 1rem;
    min-height: 100vh;
  }

  .title {
    color: var(--text-color-terminal);
    font-size: 2rem;
  }

  @keyframes glitch {
    0% {
      clip-path: var(--slice-1);
      transform: translate(-20px, -10px);
    }
    10% {
      clip-path: var(--slice-3);
      transform: translate(10px, 10px);
    }
    20% {
      clip-path: var(--slice-1);
      transform: translate(-10px, 10px);
    }
    30% {
      clip-path: var(--slice-3);
      transform: translate(0px, 5px);
    }
    40% {
      clip-path: var(--slice-2);
      transform: translate(-5px, 0px);
    }
    50% {
      clip-path: var(--slice-3);
      transform: translate(5px, 0px);
    }
    60% {
      clip-path: var(--slice-4);
      transform: translate(5px, 10px);
    }
    70% {
      clip-path: var(--slice-2);
      transform: translate(-10px, 10px);
    }
    80% {
      clip-path: var(--slice-5);
      transform: translate(20px, -10px);
    }
    90% {
      clip-path: var(--slice-1);
      transform: translate(-10px, 0px);
    }
    100% {
      clip-path: var(--slice-1);
      transform: translate(0);
    }
  }
</style>
